AWSTemplateFormatVersion: 2010-09-09
Description: Template to create secrets in secrets manager and have lambda rotate them. 
Transform: AWS::Serverless-2016-10-31

Parameters: 

  pRdsDbPort:
    Type: String
    Default: 3306
    Description: 3306 mysql/mariadb, 1433 mssql, & 5432 postgres
    AllowedValues:
      - 3306
      - 1433
      - 5432

  pEnvironmentTag:
    Type: String
    Description: Environment for default resource tagging
    Default: production
    AllowedValues:
      - production
      - staging
      - sandbox
      - test
      - development
      - qa

  pVpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID

  pSecurityGroupID: 
    Type: String
    Description: Security Group ID

  pVpcCidr:
    Type: String
    Description: VPC CIDR

  pKmsARN:
    Type: String
    Description: KMS key for Secrets Manager

  pPrivsubnetA:
    Type: String
    Description: Private Subnet
  
  pPrivsubnetB:
    Type: String
    Description: Private Subnet
  
  pRdsInstanceIdentifier:
    Type: String
    Description: Instance Identifier

  pRDSDBARN:
    Type: String
    Description: RDS Cluster to associate with secrets manager

Metadata:
  AWS::CloudFormation::Interface:
    ParameterLabels:
      pVpcId:
        default: VPC ID
      pVpcCidr:
        default: VPC CIDR
      pPrivsubnetA:
        default: VPC Private Subnet
      pPrivsubnetB:
        default: VPC Private Subnet
      pRdsInstanceIdentifier:
        default: RDS Instance Identifier
      pRdsDbPort:
        default: RDS DB Port
      pKmsARN:
        default: Secrets Manager KMS Key ARN
      pEnvironmentTag:
        default: Environment Tag
      pSecurityGroupID: 
        default: Parent VPC Stack
      pRDSDBARN:
        default: RDS cluster

Resources:
  ClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows access to RDS Port
      VpcId: !Ref pVpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: !Ref pRdsDbPort
        ToPort: !Ref pRdsDbPort
        CidrIp: !Ref pVpcCidr
      Tags:
        - Key: Name
          Value: !Sub ${pRdsInstanceIdentifier}-SG
        - Key: environment
          Value: !Ref pEnvironmentTag
        - Key: controlled-by
          Value: !Sub cloudformation-${AWS::StackName}

# Role used by Secrets Manager Rotation Function
  iamLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      RoleName: !Sub "lambda-iam-role-${AWS::Region}"

  iamLambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref iamLambdaRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Sid: AllowAccessToSecretsManager
            Effect: "Allow"
            Action:
              - "secretsmanager:*"
            Resource: !Ref DBSecretsManagerSecret
          -
            Sid: AllowAccessToKMS
            Effect: "Allow"
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey
              - kms:GenerateDataKeyWithoutPlaintext
              - kms:DescribeKey
              - kms:CreateGrant
            Resource: !Ref pKmsARN
          -
            Sid: AllowAccessToENIs
            Effect: "Allow"
            Action:
              - ec2:DescribeNetworkInterfaces
              - ec2:CreateNetworkInterface
              - ec2:DeleteNetworkInterface
              - ec2:AttachNetworkInterface
            Resource: "*"
          -
            Sid: AllowAccessToCloudWatchLogs
            Effect: "Allow"
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "arn:aws:logs:*:*:*"

  # Secret Manager creating a randomly generated password
  DBSecretsManagerSecret:
    Type: AWS::SecretsManager::Secret
    Properties: 
      Description: "Database Credentials"
      GenerateSecretString:
        SecretStringTemplate: '{"username": "postgres"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludeCharacters: '"@/\'
      KmsKeyId: !Ref pKmsARN
      Name: !Sub '${AWS::StackName}-db-password'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-db-password'

  DBSecretsManagerSecretAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref DBSecretsManagerSecret
      TargetId: !Ref pRDSDBARN
      TargetType: AWS::RDS::DBInstance

  DBSecretsManagerSecretRotation:
    DependsOn: DBSecretsManagerSecretAttachment
    Type: AWS::SecretsManager::RotationSchedule
    Properties:
      SecretId: !Ref DBSecretsManagerSecret
      RotationLambdaARN: !GetAtt DBSecretsManagerSecretRotationFunction.Outputs.RotationLambdaARN
      RotationRules:
        AutomaticallyAfterDays: 60

  # Ingress rule added to Secrets Manager Endpoint Security Group
  SecretsManagerVPCEndpointIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref pSecurityGroupID
      IpProtocol: -1
      SourceSecurityGroupId: !Ref ClusterSecurityGroup
      Description: 'Lambda Function and RDS Security Group'

# SAM Application deployed with necessary parameters for RDS communication
  DBSecretsManagerSecretRotationFunction:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:297356227824:applications/SecretsManagerRDSPostgreSQLRotationSingleUser
        SemanticVersion: 1.1.41
      Parameters:
        endpoint: !Sub "https://secretsmanager.${AWS::Region}.${AWS::URLSuffix}"
        functionName: "sam-secrets-manager-rotation"
        kmsKeyArn: !Ref pKmsARN
        vpcSecurityGroupIds: !Ref ClusterSecurityGroup
        vpcSubnetIds: 
                  Fn::Join:
                    - ","
                    - - !Ref pPrivsubnetA
                      - !Ref pPrivsubnetB

  DBSecretsManagerLambdaInvokePermission:
    DependsOn: DBSecretsManagerSecretRotationFunction
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt DBSecretsManagerSecretRotationFunction.Outputs.RotationLambdaARN
      Action: 'lambda:InvokeFunction'
      Principal: secretsmanager.amazonaws.com